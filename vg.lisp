;; Generated by WHAT-THE-FFI  (do not edit)
(in-package #:vg)
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:448:9)
;;  blend-mode (was _VGBlendMode)
;;
(defconstant blend-src #x2000 );; VG_BLEND_SRC
(defconstant blend-src-over #x2001 );; VG_BLEND_SRC_OVER
(defconstant blend-dst-over #x2002 );; VG_BLEND_DST_OVER
(defconstant blend-src-in #x2003 );; VG_BLEND_SRC_IN
(defconstant blend-dst-in #x2004 );; VG_BLEND_DST_IN
(defconstant blend-multiply #x2005 );; VG_BLEND_MULTIPLY
(defconstant blend-screen #x2006 );; VG_BLEND_SCREEN
(defconstant blend-darken #x2007 );; VG_BLEND_DARKEN
(defconstant blend-lighten #x2008 );; VG_BLEND_LIGHTEN
(defconstant blend-additive #x2009 );; VG_BLEND_ADDITIVE
(defconstant blend-mode-force-size #x7FFFFFFF );; VG_BLEND_MODE_FORCE_SIZE
(export '(blend-src blend-src-over blend-dst-over blend-src-in blend-dst-in
          blend-multiply blend-screen blend-darken blend-lighten blend-additive
          blend-mode-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:431:9)
;;  image-mode (was _VGImageMode)
;;
(defconstant draw-image-normal #x1F00 );; VG_DRAW_IMAGE_NORMAL
(defconstant draw-image-multiply #x1F01 );; VG_DRAW_IMAGE_MULTIPLY
(defconstant draw-image-stencil #x1F02 );; VG_DRAW_IMAGE_STENCIL
(defconstant image-mode-force-size #x7FFFFFFF );; VG_IMAGE_MODE_FORCE_SIZE
(export '(draw-image-normal draw-image-multiply draw-image-stencil
          image-mode-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:423:9)
;;  image-param-type (was _VGImageParamType)
;;
(defconstant image-format #x1E00 );; VG_IMAGE_FORMAT
(defconstant image-width #x1E01 );; VG_IMAGE_WIDTH
(defconstant image-height #x1E02 );; VG_IMAGE_HEIGHT
(defconstant image-param-type-force-size #x7FFFFFFF );; VG_IMAGE_PARAM_TYPE_FORCE_SIZE
(export '(image-format image-width image-height image-param-type-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:415:9)
;;  image-quality (was _VGImageQuality)
;;
(defconstant image-quality-nonantialiased #x1 );; VG_IMAGE_QUALITY_NONANTIALIASED
(defconstant image-quality-faster #x2 );; VG_IMAGE_QUALITY_FASTER
(defconstant image-quality-better #x4 );; VG_IMAGE_QUALITY_BETTER
(defconstant image-quality-force-size #x7FFFFFFF );; VG_IMAGE_QUALITY_FORCE_SIZE
(export '(image-quality-nonantialiased image-quality-faster
          image-quality-better image-quality-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:346:9)
;;  color-ramp-spread-mode (was _VGColorRampSpreadMode)
;;
(defconstant color-ramp-spread-pad #x1C00 );; VG_COLOR_RAMP_SPREAD_PAD
(defconstant color-ramp-spread-repeat #x1C01 );; VG_COLOR_RAMP_SPREAD_REPEAT
(defconstant color-ramp-spread-reflect #x1C02 );; VG_COLOR_RAMP_SPREAD_REFLECT
(defconstant color-ramp-spread-mode-force-size #x7FFFFFFF );; VG_COLOR_RAMP_SPREAD_MODE_FORCE_SIZE
(export '(color-ramp-spread-pad color-ramp-spread-repeat
          color-ramp-spread-reflect color-ramp-spread-mode-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:317:9)
;;  paint-param-type (was _VGPaintParamType)
;;
(defconstant paint-type #x1A00 );; VG_PAINT_TYPE
(defconstant paint-color #x1A01 );; VG_PAINT_COLOR
(defconstant paint-color-ramp-spread-mode #x1A02 );; VG_PAINT_COLOR_RAMP_SPREAD_MODE
(defconstant paint-color-ramp-premultiplied #x1A07 );; VG_PAINT_COLOR_RAMP_PREMULTIPLIED
(defconstant paint-color-ramp-stops #x1A03 );; VG_PAINT_COLOR_RAMP_STOPS
(defconstant paint-linear-gradient #x1A04 );; VG_PAINT_LINEAR_GRADIENT
(defconstant paint-radial-gradient #x1A05 );; VG_PAINT_RADIAL_GRADIENT
(defconstant paint-pattern-tiling-mode #x1A06 );; VG_PAINT_PATTERN_TILING_MODE
(defconstant paint-param-type-force-size #x7FFFFFFF );; VG_PAINT_PARAM_TYPE_FORCE_SIZE
(export '(paint-type paint-color paint-color-ramp-spread-mode
          paint-color-ramp-premultiplied paint-color-ramp-stops
          paint-linear-gradient paint-radial-gradient paint-pattern-tiling-mode
          paint-param-type-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:337:9)
;;  paint-type (was _VGPaintType)
;;
(defconstant paint-type-color #x1B00 );; VG_PAINT_TYPE_COLOR
(defconstant paint-type-linear-gradient #x1B01 );; VG_PAINT_TYPE_LINEAR_GRADIENT
(defconstant paint-type-radial-gradient #x1B02 );; VG_PAINT_TYPE_RADIAL_GRADIENT
(defconstant paint-type-pattern #x1B03 );; VG_PAINT_TYPE_PATTERN
(defconstant paint-type-force-size #x7FFFFFFF );; VG_PAINT_TYPE_FORCE_SIZE
(export '(paint-type-color paint-type-linear-gradient
          paint-type-radial-gradient paint-type-pattern paint-type-force-size))

;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:303:9)
;;  fill-rule (was _VGFillRule)
;;
(defconstant even-odd #x1900 );; VG_EVEN_ODD
(defconstant non-zero #x1901 );; VG_NON_ZERO
(defconstant fill-rule-force-size #x7FFFFFFF );; VG_FILL_RULE_FORCE_SIZE
(export '(even-odd non-zero fill-rule-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:295:9)
;;  join-style (was _VGJoinStyle)
;;
(defconstant join-miter #x1800 );; VG_JOIN_MITER
(defconstant join-round #x1801 );; VG_JOIN_ROUND
(defconstant join-bevel #x1802 );; VG_JOIN_BEVEL
(defconstant join-style-force-size #x7FFFFFFF );; VG_JOIN_STYLE_FORCE_SIZE
(export '(join-miter join-round join-bevel join-style-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:287:9)
;;  cap-style (was _VGCapStyle)
;;
(defconstant cap-butt #x1700 );; VG_CAP_BUTT
(defconstant cap-round #x1701 );; VG_CAP_ROUND
(defconstant cap-square #x1702 );; VG_CAP_SQUARE
(defconstant cap-style-force-size #x7FFFFFFF );; VG_CAP_STYLE_FORCE_SIZE
(export '(cap-butt cap-round cap-square cap-style-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:258:9)
;;  path-capabilities (was _VGPathCapabilities)
;;
(defconstant path-capability-append-from #x1 );; VG_PATH_CAPABILITY_APPEND_FROM
(defconstant path-capability-append-to #x2 );; VG_PATH_CAPABILITY_APPEND_TO
(defconstant path-capability-modify #x4 );; VG_PATH_CAPABILITY_MODIFY
(defconstant path-capability-transform-from #x8 );; VG_PATH_CAPABILITY_TRANSFORM_FROM
(defconstant path-capability-transform-to #x10 );; VG_PATH_CAPABILITY_TRANSFORM_TO
(defconstant path-capability-interpolate-from #x20 );; VG_PATH_CAPABILITY_INTERPOLATE_FROM
(defconstant path-capability-interpolate-to #x40 );; VG_PATH_CAPABILITY_INTERPOLATE_TO
(defconstant path-capability-path-length #x80 );; VG_PATH_CAPABILITY_PATH_LENGTH
(defconstant path-capability-point-along-path #x100 );; VG_PATH_CAPABILITY_POINT_ALONG_PATH
(defconstant path-capability-tangent-along-path #x200 );; VG_PATH_CAPABILITY_TANGENT_ALONG_PATH
(defconstant path-capability-path-bounds #x400 );; VG_PATH_CAPABILITY_PATH_BOUNDS
(defconstant path-capability-path-transformed-bounds #x800 );; VG_PATH_CAPABILITY_PATH_TRANSFORMED_BOUNDS
(defconstant path-capability-all #xFFF );; VG_PATH_CAPABILITY_ALL
(defconstant path-capabilities-force-size #x7FFFFFFF );; VG_PATH_CAPABILITIES_FORCE_SIZE
(export '(path-capability-append-from path-capability-append-to
          path-capability-modify path-capability-transform-from
          path-capability-transform-to path-capability-interpolate-from
          path-capability-interpolate-to path-capability-path-length
          path-capability-point-along-path path-capability-tangent-along-path
          path-capability-path-bounds path-capability-path-transformed-bounds
          path-capability-all path-capabilities-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:229:9)
;;  path-command (was _VGPathCommand)
;;
(defconstant move-to-abs #x2 );; VG_MOVE_TO_ABS
(defconstant move-to-rel #x3 );; VG_MOVE_TO_REL
(defconstant line-to-abs #x4 );; VG_LINE_TO_ABS
(defconstant line-to-rel #x5 );; VG_LINE_TO_REL
(defconstant hline-to-abs #x6 );; VG_HLINE_TO_ABS
(defconstant hline-to-rel #x7 );; VG_HLINE_TO_REL
(defconstant vline-to-abs #x8 );; VG_VLINE_TO_ABS
(defconstant vline-to-rel #x9 );; VG_VLINE_TO_REL
(defconstant quad-to-abs #xA );; VG_QUAD_TO_ABS
(defconstant quad-to-rel #xB );; VG_QUAD_TO_REL
(defconstant cubic-to-abs #xC );; VG_CUBIC_TO_ABS
(defconstant cubic-to-rel #xD );; VG_CUBIC_TO_REL
(defconstant squad-to-abs #xE );; VG_SQUAD_TO_ABS
(defconstant squad-to-rel #xF );; VG_SQUAD_TO_REL
(defconstant scubic-to-abs #x10 );; VG_SCUBIC_TO_ABS
(defconstant scubic-to-rel #x11 );; VG_SCUBIC_TO_REL
(defconstant sccwarc-to-abs #x12 );; VG_SCCWARC_TO_ABS
(defconstant sccwarc-to-rel #x13 );; VG_SCCWARC_TO_REL
(defconstant scwarc-to-abs #x14 );; VG_SCWARC_TO_ABS
(defconstant scwarc-to-rel #x15 );; VG_SCWARC_TO_REL
(defconstant lccwarc-to-abs #x16 );; VG_LCCWARC_TO_ABS
(defconstant lccwarc-to-rel #x17 );; VG_LCCWARC_TO_REL
(defconstant lcwarc-to-abs #x18 );; VG_LCWARC_TO_ABS
(defconstant lcwarc-to-rel #x19 );; VG_LCWARC_TO_REL
(defconstant path-command-force-size #x7FFFFFFF );; VG_PATH_COMMAND_FORCE_SIZE
(export '(move-to-abs move-to-rel line-to-abs line-to-rel hline-to-abs
          hline-to-rel vline-to-abs vline-to-rel quad-to-abs quad-to-rel
          cubic-to-abs cubic-to-rel squad-to-abs squad-to-rel scubic-to-abs
          scubic-to-rel sccwarc-to-abs sccwarc-to-rel scwarc-to-abs
          scwarc-to-rel lccwarc-to-abs lccwarc-to-rel lcwarc-to-abs
          lcwarc-to-rel path-command-force-size))
;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:209:9)
;;  path-segment (was _VGPathSegment)
;;
(defconstant close-path #x0 );; VG_CLOSE_PATH
(defconstant move-to #x2 );; VG_MOVE_TO
(defconstant line-to #x4 );; VG_LINE_TO
(defconstant hline-to #x6 );; VG_HLINE_TO
(defconstant vline-to #x8 );; VG_VLINE_TO
(defconstant quad-to #xA );; VG_QUAD_TO
(defconstant cubic-to #xC );; VG_CUBIC_TO
(defconstant squad-to #xE );; VG_SQUAD_TO
(defconstant scubic-to #x10 );; VG_SCUBIC_TO
(defconstant sccwarc-to #x12 );; VG_SCCWARC_TO
(defconstant scwarc-to #x14 );; VG_SCWARC_TO
(defconstant lccwarc-to #x16 );; VG_LCCWARC_TO
(defconstant lcwarc-to #x18 );; VG_LCWARC_TO
(defconstant segment-mask #x1E );; VG_SEGMENT_MASK
(defconstant path-segment-force-size #x7FFFFFFF );; VG_PATH_SEGMENT_FORCE_SIZE
(export '(close-path move-to line-to hline-to vline-to quad-to cubic-to
          squad-to scubic-to sccwarc-to scwarc-to lccwarc-to lcwarc-to
          segment-mask path-segment-force-size))

;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:310:9)
;;  paint-mode (was _VGPaintMode)
;;
(defconstant stroke-path #x1 );; VG_STROKE_PATH
(defconstant fill-path #x2 );; VG_FILL_PATH
(defconstant paint-mode-force-size #x7FFFFFFF );; VG_PAINT_MODE_FORCE_SIZE
(export '(stroke-path fill-path paint-mode-force-size))

;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:483:9)
;;
(defcenum string-id ;; _VGStringID
  (:vendor #x2300) ;;VG_VENDOR
  (:renderer #x2301) ;;VG_RENDERER
  (:version #x2302) ;;VG_VERSION
  (:extensions #x2303) ;;VG_EXTENSIONS
  (:string-id-force-size #x7FFFFFFF) ;;VG_STRING_ID_FORCE_SIZE
)
(export 'string-id)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:739:42)
;;
(declaim (inline &get-string))
(defcfun ("vgGetString" &get-string) (:pointer :UCHAR)
  "see: (/opt/vc/include/VG/openvg.h:739:42)"
  (name  string-id) ;; name #<typedef VGStringID>
)
(export '&get-string)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:469:9)
;;
(defcenum hardware-query-type ;; _VGHardwareQueryType
  (:image-format-query #x2100) ;;VG_IMAGE_FORMAT_QUERY
  (:path-datatype-query #x2101) ;;VG_PATH_DATATYPE_QUERY
  (:hardware-query-type-force-size #x7FFFFFFF) ;;VG_HARDWARE_QUERY_TYPE_FORCE_SIZE
)
(export 'hardware-query-type)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:476:9)
;;
(defcenum hardware-query-result ;; _VGHardwareQueryResult
  (:hardware-accelerated #x2200) ;;VG_HARDWARE_ACCELERATED
  (:hardware-unaccelerated #x2201) ;;VG_HARDWARE_UNACCELERATED
  (:hardware-query-result-force-size #x7FFFFFFF) ;;VG_HARDWARE_QUERY_RESULT_FORCE_SIZE
)
(export 'hardware-query-result)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:735:48)
;;
(declaim (inline &hardware-query))
(defcfun ("vgHardwareQuery" &hardware-query) hardware-query-result
  "see: (/opt/vc/include/VG/openvg.h:735:48)"
  (key  hardware-query-type) ;; key #<typedef VGHardwareQueryType>
  (setting  :INT) ;; setting #<typedef VGint>
)
(export '&hardware-query)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:439:9)
;;
(defcenum image-channel ;; _VGImageChannel
  (:red #x8) ;;VG_RED
  (:green #x4) ;;VG_GREEN
  (:blue #x2) ;;VG_BLUE
  (:alpha #x1) ;;VG_ALPHA
  (:image-channel-force-size #x7FFFFFFF) ;;VG_IMAGE_CHANNEL_FORCE_SIZE
)
(export 'image-channel)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:728:31)
;;
(declaim (inline &lookup-single))
(defcfun ("vgLookupSingle" &lookup-single) :VOID
  "see: (/opt/vc/include/VG/openvg.h:728:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (src  :UINT) ;; src #<typedef VGImage>
  (lookup-table  (:pointer :UINT)) ;; lookupTable #<POINTER #<typedef VGuint>>
  (source-channel  image-channel) ;; sourceChannel #<typedef VGImageChannel>
  (output-linear  :UINT) ;; outputLinear #<typedef VGboolean>
  (output-premultiplied  :UINT) ;; outputPremultiplied #<typedef VGboolean>
)
(export '&lookup-single)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:721:31)
;;
(declaim (inline &lookup))
(defcfun ("vgLookup" &lookup) :VOID
  "see: (/opt/vc/include/VG/openvg.h:721:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (src  :UINT) ;; src #<typedef VGImage>
  (red-lut  (:pointer :UCHAR)) ;; redLUT #<POINTER #<typedef VGubyte>>
  (green-lut  (:pointer :UCHAR)) ;; greenLUT #<POINTER #<typedef VGubyte>>
  (blue-lut  (:pointer :UCHAR)) ;; blueLUT #<POINTER #<typedef VGubyte>>
  (alpha-lut  (:pointer :UCHAR)) ;; alphaLUT #<POINTER #<typedef VGubyte>>
  (output-linear  :UINT) ;; outputLinear #<typedef VGboolean>
  (output-premultiplied  :UINT) ;; outputPremultiplied #<typedef VGboolean>
)
(export '&lookup)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:354:9)
;;
(defcenum tiling-mode ;; _VGTilingMode
  (:tile-fill #x1D00) ;;VG_TILE_FILL
  (:tile-pad #x1D01) ;;VG_TILE_PAD
  (:tile-repeat #x1D02) ;;VG_TILE_REPEAT
  (:tile-reflect #x1D03) ;;VG_TILE_REFLECT
  (:tiling-mode-force-size #x7FFFFFFF) ;;VG_TILING_MODE_FORCE_SIZE
)
(export 'tiling-mode)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:717:31)
;;
(declaim (inline &gaussian-blur))
(defcfun ("vgGaussianBlur" &gaussian-blur) :VOID
  "see: (/opt/vc/include/VG/openvg.h:717:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (src  :UINT) ;; src #<typedef VGImage>
  (std-deviation-x  :FLOAT) ;; stdDeviationX #<typedef VGfloat>
  (std-deviation-y  :FLOAT) ;; stdDeviationY #<typedef VGfloat>
  (tiling-mode  tiling-mode) ;; tilingMode #<typedef VGTilingMode>
)
(export '&gaussian-blur)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:708:31)
;;
(declaim (inline &separable-convolve))
(defcfun ("vgSeparableConvolve" &separable-convolve) :VOID
  "see: (/opt/vc/include/VG/openvg.h:708:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (src  :UINT) ;; src #<typedef VGImage>
  (kernel-width  :INT) ;; kernelWidth #<typedef VGint>
  (kernel-height  :INT) ;; kernelHeight #<typedef VGint>
  (shift-x  :INT) ;; shiftX #<typedef VGint>
  (shift-y  :INT) ;; shiftY #<typedef VGint>
  (kernel-x  (:pointer :SHORT)) ;; kernelX #<POINTER #<typedef VGshort>>
  (kernel-y  (:pointer :SHORT)) ;; kernelY #<POINTER #<typedef VGshort>>
  (scale  :FLOAT) ;; scale #<typedef VGfloat>
  (bias  :FLOAT) ;; bias #<typedef VGfloat>
  (tiling-mode  tiling-mode) ;; tilingMode #<typedef VGTilingMode>
)
(export '&separable-convolve)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:701:31)
;;
(declaim (inline &convolve))
(defcfun ("vgConvolve" &convolve) :VOID
  "see: (/opt/vc/include/VG/openvg.h:701:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (src  :UINT) ;; src #<typedef VGImage>
  (kernel-width  :INT) ;; kernelWidth #<typedef VGint>
  (kernel-height  :INT) ;; kernelHeight #<typedef VGint>
  (shift-x  :INT) ;; shiftX #<typedef VGint>
  (shift-y  :INT) ;; shiftY #<typedef VGint>
  (kernel  (:pointer :SHORT)) ;; kernel #<POINTER #<typedef VGshort>>
  (scale  :FLOAT) ;; scale #<typedef VGfloat>
  (bias  :FLOAT) ;; bias #<typedef VGfloat>
  (tiling-mode  tiling-mode) ;; tilingMode #<typedef VGTilingMode>
)
(export '&convolve)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:699:31)
;;
(declaim (inline &color-matrix))
(defcfun ("vgColorMatrix" &color-matrix) :VOID
  "see: (/opt/vc/include/VG/openvg.h:699:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (src  :UINT) ;; src #<typedef VGImage>
  (matrix  (:pointer :FLOAT)) ;; matrix #<POINTER #<typedef VGfloat>>
)
(export '&color-matrix)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:690:31)
;;
(declaim (inline &draw-glyphs))
(defcfun ("vgDrawGlyphs" &draw-glyphs) :VOID
  "see: (/opt/vc/include/VG/openvg.h:690:31)"
  (font  :UINT) ;; font #<typedef VGFont>
  (glyph-count  :INT) ;; glyphCount #<typedef VGint>
  (glyph-indices  (:pointer :UINT)) ;; glyphIndices #<POINTER #<typedef VGuint>>
  (adjustments-x  (:pointer :FLOAT)) ;; adjustments_x #<POINTER #<typedef VGfloat>>
  (adjustments-y  (:pointer :FLOAT)) ;; adjustments_y #<POINTER #<typedef VGfloat>>
  (paint-modes  :UINT) ;; paintModes #<typedef VGbitfield>
  (allow-auto-hinting  :UINT) ;; allowAutoHinting #<typedef VGboolean>
)
(export '&draw-glyphs)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:686:31)
;;
(declaim (inline &draw-glyph))
(defcfun ("vgDrawGlyph" &draw-glyph) :VOID
  "see: (/opt/vc/include/VG/openvg.h:686:31)"
  (font  :UINT) ;; font #<typedef VGFont>
  (glyph-index  :UINT) ;; glyphIndex #<typedef VGuint>
  (paint-modes  :UINT) ;; paintModes #<typedef VGbitfield>
  (allow-auto-hinting  :UINT) ;; allowAutoHinting #<typedef VGboolean>
)
(export '&draw-glyph)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:685:31)
;;
(declaim (inline &clear-glyph))
(defcfun ("vgClearGlyph" &clear-glyph) :VOID
  "see: (/opt/vc/include/VG/openvg.h:685:31)"
  (font  :UINT) ;; font #<typedef VGFont>
  (glyph-index  :UINT) ;; glyphIndex #<typedef VGuint>
)
(export '&clear-glyph)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:680:31)
;;
(declaim (inline &set-glyph-to-image))
(defcfun ("vgSetGlyphToImage" &set-glyph-to-image) :VOID
  "see: (/opt/vc/include/VG/openvg.h:680:31)"
  (font  :UINT) ;; font #<typedef VGFont>
  (glyph-index  :UINT) ;; glyphIndex #<typedef VGuint>
  (image  :UINT) ;; image #<typedef VGImage>
  (glyph-origin  (:pointer :FLOAT )) ;; glyphOrigin #<array [2] of #<typedef VGfloat>>
  (escapement  (:pointer :FLOAT )) ;; escapement #<array [2] of #<typedef VGfloat>>
)
(export '&set-glyph-to-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:674:31)
;;
(declaim (inline &set-glyph-to-path))
(defcfun ("vgSetGlyphToPath" &set-glyph-to-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:674:31)"
  (font  :UINT) ;; font #<typedef VGFont>
  (glyph-index  :UINT) ;; glyphIndex #<typedef VGuint>
  (path  :UINT) ;; path #<typedef VGPath>
  (is-hinted  :UINT) ;; isHinted #<typedef VGboolean>
  (glyph-origin  (:pointer :FLOAT )) ;; glyphOrigin #<array [2] of #<typedef VGfloat>>
  (escapement  (:pointer :FLOAT )) ;; escapement #<array [2] of #<typedef VGfloat>>
)
(export '&set-glyph-to-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:673:31)
;;
(declaim (inline &destroy-font))
(defcfun ("vgDestroyFont" &destroy-font) :VOID
  "see: (/opt/vc/include/VG/openvg.h:673:31)"
  (font  :UINT) ;; font #<typedef VGFont>
)
(export '&destroy-font)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:672:33)
;;
(declaim (inline &create-font))
(defcfun ("vgCreateFont" &create-font) :UINT
  "see: (/opt/vc/include/VG/openvg.h:672:33)"
  (glyph-capacity-hint  :INT) ;; glyphCapacityHint #<typedef VGint>
)
(export '&create-font)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:667:31)
;;
(declaim (inline &copy-pixels))
(defcfun ("vgCopyPixels" &copy-pixels) :VOID
  "see: (/opt/vc/include/VG/openvg.h:667:31)"
  (dx  :INT) ;; dx #<typedef VGint>
  (dy  :INT) ;; dy #<typedef VGint>
  (sx  :INT) ;; sx #<typedef VGint>
  (sy  :INT) ;; sy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&copy-pixels)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:363:9)
;;
(defcenum image-format ;; _VGImageFormat
  (:s-rgbx-8888 #x0) ;;VG_sRGBX_8888
  (:s-rgba-8888 #x1) ;;VG_sRGBA_8888
  (:s-rgba-8888-pre #x2) ;;VG_sRGBA_8888_PRE
  (:s-rgb-565 #x3) ;;VG_sRGB_565
  (:s-rgba-5551 #x4) ;;VG_sRGBA_5551
  (:s-rgba-4444 #x5) ;;VG_sRGBA_4444
  (:s-l-8 #x6) ;;VG_sL_8
  (:l-rgbx-8888 #x7) ;;VG_lRGBX_8888
  (:l-rgba-8888 #x8) ;;VG_lRGBA_8888
  (:l-rgba-8888-pre #x9) ;;VG_lRGBA_8888_PRE
  (:l-l-8 #xA) ;;VG_lL_8
  (:a-8 #xB) ;;VG_A_8
  (:bw-1 #xC) ;;VG_BW_1
  (:a-1 #xD) ;;VG_A_1
  (:a-4 #xE) ;;VG_A_4
  (:s-xrgb-8888 #x40) ;;VG_sXRGB_8888
  (:s-argb-8888 #x41) ;;VG_sARGB_8888
  (:s-argb-8888-pre #x42) ;;VG_sARGB_8888_PRE
  (:s-argb-1555 #x44) ;;VG_sARGB_1555
  (:s-argb-4444 #x45) ;;VG_sARGB_4444
  (:l-xrgb-8888 #x47) ;;VG_lXRGB_8888
  (:l-argb-8888 #x48) ;;VG_lARGB_8888
  (:l-argb-8888-pre #x49) ;;VG_lARGB_8888_PRE
  (:s-bgrx-8888 #x80) ;;VG_sBGRX_8888
  (:s-bgra-8888 #x81) ;;VG_sBGRA_8888
  (:s-bgra-8888-pre #x82) ;;VG_sBGRA_8888_PRE
  (:s-bgr-565 #x83) ;;VG_sBGR_565
  (:s-bgra-5551 #x84) ;;VG_sBGRA_5551
  (:s-bgra-4444 #x85) ;;VG_sBGRA_4444
  (:l-bgrx-8888 #x87) ;;VG_lBGRX_8888
  (:l-bgra-8888 #x88) ;;VG_lBGRA_8888
  (:l-bgra-8888-pre #x89) ;;VG_lBGRA_8888_PRE
  (:s-xbgr-8888 #xC0) ;;VG_sXBGR_8888
  (:s-abgr-8888 #xC1) ;;VG_sABGR_8888
  (:s-abgr-8888-pre #xC2) ;;VG_sABGR_8888_PRE
  (:s-abgr-1555 #xC4) ;;VG_sABGR_1555
  (:s-abgr-4444 #xC5) ;;VG_sABGR_4444
  (:l-xbgr-8888 #xC7) ;;VG_lXBGR_8888
  (:l-abgr-8888 #xC8) ;;VG_lABGR_8888
  (:l-abgr-8888-pre #xC9) ;;VG_lABGR_8888_PRE
  (:image-format-force-size #x7FFFFFFF) ;;VG_IMAGE_FORMAT_FORCE_SIZE
)
(export 'image-format)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:663:31)
;;
(declaim (inline &read-pixels))
(defcfun ("vgReadPixels" &read-pixels) :VOID
  "see: (/opt/vc/include/VG/openvg.h:663:31)"
  (data  (:pointer :VOID)) ;; data #<POINTER #<VBASE :void>>
  (data-stride  :INT) ;; dataStride #<typedef VGint>
  (data-format  image-format) ;; dataFormat #<typedef VGImageFormat>
  (sx  :INT) ;; sx #<typedef VGint>
  (sy  :INT) ;; sy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&read-pixels)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:660:31)
;;
(declaim (inline &get-pixels))
(defcfun ("vgGetPixels" &get-pixels) :VOID
  "see: (/opt/vc/include/VG/openvg.h:660:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (dx  :INT) ;; dx #<typedef VGint>
  (dy  :INT) ;; dy #<typedef VGint>
  (sx  :INT) ;; sx #<typedef VGint>
  (sy  :INT) ;; sy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&get-pixels)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:656:31)
;;
(declaim (inline &write-pixels))
(defcfun ("vgWritePixels" &write-pixels) :VOID
  "see: (/opt/vc/include/VG/openvg.h:656:31)"
  (data  (:pointer :VOID)) ;; data #<POINTER #<VBASE :void>>
  (data-stride  :INT) ;; dataStride #<typedef VGint>
  (data-format  image-format) ;; dataFormat #<typedef VGImageFormat>
  (dx  :INT) ;; dx #<typedef VGint>
  (dy  :INT) ;; dy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&write-pixels)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:653:31)
;;
(declaim (inline &set-pixels))
(defcfun ("vgSetPixels" &set-pixels) :VOID
  "see: (/opt/vc/include/VG/openvg.h:653:31)"
  (dx  :INT) ;; dx #<typedef VGint>
  (dy  :INT) ;; dy #<typedef VGint>
  (src  :UINT) ;; src #<typedef VGImage>
  (sx  :INT) ;; sx #<typedef VGint>
  (sy  :INT) ;; sy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&set-pixels)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:652:31)
;;
(declaim (inline &draw-image))
(defcfun ("vgDrawImage" &draw-image) :VOID
  "see: (/opt/vc/include/VG/openvg.h:652:31)"
  (image  :UINT) ;; image #<typedef VGImage>
)
(export '&draw-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:648:31)
;;
(declaim (inline &copy-image))
(defcfun ("vgCopyImage" &copy-image) :VOID
  "see: (/opt/vc/include/VG/openvg.h:648:31)"
  (dst  :UINT) ;; dst #<typedef VGImage>
  (dx  :INT) ;; dx #<typedef VGint>
  (dy  :INT) ;; dy #<typedef VGint>
  (src  :UINT) ;; src #<typedef VGImage>
  (sx  :INT) ;; sx #<typedef VGint>
  (sy  :INT) ;; sy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
  (dither  :UINT) ;; dither #<typedef VGboolean>
)
(export '&copy-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:647:34)
;;
(declaim (inline &get-parent))
(defcfun ("vgGetParent" &get-parent) :UINT
  "see: (/opt/vc/include/VG/openvg.h:647:34)"
  (image  :UINT) ;; image #<typedef VGImage>
)
(export '&get-parent)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:645:34)
;;
(declaim (inline &child-image))
(defcfun ("vgChildImage" &child-image) :UINT
  "see: (/opt/vc/include/VG/openvg.h:645:34)"
  (parent  :UINT) ;; parent #<typedef VGImage>
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&child-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:640:31)
;;
(declaim (inline &get-image-sub-data))
(defcfun ("vgGetImageSubData" &get-image-sub-data) :VOID
  "see: (/opt/vc/include/VG/openvg.h:640:31)"
  (image  :UINT) ;; image #<typedef VGImage>
  (data  (:pointer :VOID)) ;; data #<POINTER #<VBASE :void>>
  (data-stride  :INT) ;; dataStride #<typedef VGint>
  (data-format  image-format) ;; dataFormat #<typedef VGImageFormat>
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&get-image-sub-data)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:636:31)
;;
(declaim (inline &image-sub-data))
(defcfun ("vgImageSubData" &image-sub-data) :VOID
  "see: (/opt/vc/include/VG/openvg.h:636:31)"
  (image  :UINT) ;; image #<typedef VGImage>
  (data  (:pointer :VOID)) ;; data #<POINTER #<VBASE :void>>
  (data-stride  :INT) ;; dataStride #<typedef VGint>
  (data-format  image-format) ;; dataFormat #<typedef VGImageFormat>
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&image-sub-data)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:634:31)
;;
(declaim (inline &clear-image))
(defcfun ("vgClearImage" &clear-image) :VOID
  "see: (/opt/vc/include/VG/openvg.h:634:31)"
  (image  :UINT) ;; image #<typedef VGImage>
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&clear-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:633:31)
;;
(declaim (inline &destroy-image))
(defcfun ("vgDestroyImage" &destroy-image) :VOID
  "see: (/opt/vc/include/VG/openvg.h:633:31)"
  (image  :UINT) ;; image #<typedef VGImage>
)
(export '&destroy-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:630:34)
;;
(declaim (inline &create-image))
(defcfun ("vgCreateImage" &create-image) :UINT
  "see: (/opt/vc/include/VG/openvg.h:630:34)"
  (format  image-format) ;; format #<typedef VGImageFormat>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
  (allowed-quality  :UINT) ;; allowedQuality #<typedef VGbitfield>
)
(export '&create-image)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:627:31)
;;
(declaim (inline &paint-pattern))
(defcfun ("vgPaintPattern" &paint-pattern) :VOID
  "see: (/opt/vc/include/VG/openvg.h:627:31)"
  (paint  :UINT) ;; paint #<typedef VGPaint>
  (pattern  :UINT) ;; pattern #<typedef VGImage>
)
(export '&paint-pattern)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:626:33)
;;
(declaim (inline &get-color))
(defcfun ("vgGetColor" &get-color) :UINT
  "see: (/opt/vc/include/VG/openvg.h:626:33)"
  (paint  :UINT) ;; paint #<typedef VGPaint>
)
(export '&get-color)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:625:31)
;;
(declaim (inline &set-color))
(defcfun ("vgSetColor" &set-color) :VOID
  "see: (/opt/vc/include/VG/openvg.h:625:31)"
  (paint  :UINT) ;; paint #<typedef VGPaint>
  (rgba  :UINT) ;; rgba #<typedef VGuint>
)
(export '&set-color)




;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:624:34)
;;
(declaim (inline &get-paint))
(defcfun ("vgGetPaint" &get-paint) :UINT
  "see: (/opt/vc/include/VG/openvg.h:624:34)"
  (paint-mode  :uint) ;; paintMode #<typedef VGPaintMode> ***
)
(export '&get-paint)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:623:31)
;;
(declaim (inline &set-paint))
(defcfun ("vgSetPaint" &set-paint) :VOID
  "see: (/opt/vc/include/VG/openvg.h:623:31)"
  (paint  :UINT) ;; paint #<typedef VGPaint>
  (paint-modes  :UINT) ;; paintModes #<typedef VGbitfield>
)
(export '&set-paint)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:622:31)
;;
(declaim (inline &destroy-paint))
(defcfun ("vgDestroyPaint" &destroy-paint) :VOID
  "see: (/opt/vc/include/VG/openvg.h:622:31)"
  (paint  :UINT) ;; paint #<typedef VGPaint>
)
(export '&destroy-paint)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:621:34)
;;
(declaim (inline &create-paint))
(defcfun ("vgCreatePaint" &create-paint) :UINT
  "see: (/opt/vc/include/VG/openvg.h:621:34)"
)
(export '&create-paint)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:618:31)
;;
(declaim (inline &draw-path))
(defcfun ("vgDrawPath" &draw-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:618:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (paint-modes  :UINT) ;; paintModes #<typedef VGbitfield>
)
(export '&draw-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:615:31)
;;
(declaim (inline &path-transformed-bounds))
(defcfun ("vgPathTransformedBounds" &path-transformed-bounds) :VOID
  "see: (/opt/vc/include/VG/openvg.h:615:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (min-x  (:pointer :FLOAT)) ;; minX #<POINTER #<typedef VGfloat>>
  (min-y  (:pointer :FLOAT)) ;; minY #<POINTER #<typedef VGfloat>>
  (width  (:pointer :FLOAT)) ;; width #<POINTER #<typedef VGfloat>>
  (height  (:pointer :FLOAT)) ;; height #<POINTER #<typedef VGfloat>>
)
(export '&path-transformed-bounds)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:612:31)
;;
(declaim (inline &path-bounds))
(defcfun ("vgPathBounds" &path-bounds) :VOID
  "see: (/opt/vc/include/VG/openvg.h:612:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (min-x  (:pointer :FLOAT)) ;; minX #<POINTER #<typedef VGfloat>>
  (min-y  (:pointer :FLOAT)) ;; minY #<POINTER #<typedef VGfloat>>
  (width  (:pointer :FLOAT)) ;; width #<POINTER #<typedef VGfloat>>
  (height  (:pointer :FLOAT)) ;; height #<POINTER #<typedef VGfloat>>
)
(export '&path-bounds)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:607:31)
;;
(declaim (inline &point-along-path))
(defcfun ("vgPointAlongPath" &point-along-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:607:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (start-segment  :INT) ;; startSegment #<typedef VGint>
  (num-segments  :INT) ;; numSegments #<typedef VGint>
  (distance  :FLOAT) ;; distance #<typedef VGfloat>
  (x  (:pointer :FLOAT)) ;; x #<POINTER #<typedef VGfloat>>
  (y  (:pointer :FLOAT)) ;; y #<POINTER #<typedef VGfloat>>
  (tangent-x  (:pointer :FLOAT)) ;; tangentX #<POINTER #<typedef VGfloat>>
  (tangent-y  (:pointer :FLOAT)) ;; tangentY #<POINTER #<typedef VGfloat>>
)
(export '&point-along-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:605:34)
;;
(declaim (inline &path-length))
(defcfun ("vgPathLength" &path-length) :FLOAT
  "see: (/opt/vc/include/VG/openvg.h:605:34)"
  (path  :UINT) ;; path #<typedef VGPath>
  (start-segment  :INT) ;; startSegment #<typedef VGint>
  (num-segments  :INT) ;; numSegments #<typedef VGint>
)
(export '&path-length)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:601:36)
;;
(declaim (inline &interpolate-path))
(defcfun ("vgInterpolatePath" &interpolate-path) :UINT
  "see: (/opt/vc/include/VG/openvg.h:601:36)"
  (dst-path  :UINT) ;; dstPath #<typedef VGPath>
  (start-path  :UINT) ;; startPath #<typedef VGPath>
  (end-path  :UINT) ;; endPath #<typedef VGPath>
  (amount  :FLOAT) ;; amount #<typedef VGfloat>
)
(export '&interpolate-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:600:31)
;;
(declaim (inline &transform-path))
(defcfun ("vgTransformPath" &transform-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:600:31)"
  (dst-path  :UINT) ;; dstPath #<typedef VGPath>
  (src-path  :UINT) ;; srcPath #<typedef VGPath>
)
(export '&transform-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:597:31)
;;
(declaim (inline &modify-path-coords))
(defcfun ("vgModifyPathCoords" &modify-path-coords) :VOID
  "see: (/opt/vc/include/VG/openvg.h:597:31)"
  (dst-path  :UINT) ;; dstPath #<typedef VGPath>
  (start-index  :INT) ;; startIndex #<typedef VGint>
  (num-segments  :INT) ;; numSegments #<typedef VGint>
  (path-data  (:pointer :VOID)) ;; pathData #<POINTER #<VBASE :void>>
)
(export '&modify-path-coords)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:593:31)
;;
(declaim (inline &append-path-data))
(defcfun ("vgAppendPathData" &append-path-data) :VOID
  "see: (/opt/vc/include/VG/openvg.h:593:31)"
  (dst-path  :UINT) ;; dstPath #<typedef VGPath>
  (num-segments  :INT) ;; numSegments #<typedef VGint>
  (path-segments  (:pointer :UCHAR)) ;; pathSegments #<POINTER #<typedef VGubyte>>
  (path-data  (:pointer :VOID)) ;; pathData #<POINTER #<VBASE :void>>
)
(export '&append-path-data)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:592:31)
;;
(declaim (inline &append-path))
(defcfun ("vgAppendPath" &append-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:592:31)"
  (dst-path  :UINT) ;; dstPath #<typedef VGPath>
  (src-path  :UINT) ;; srcPath #<typedef VGPath>
)
(export '&append-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:591:37)
;;
(declaim (inline &get-path-capabilities))
(defcfun ("vgGetPathCapabilities" &get-path-capabilities) :UINT
  "see: (/opt/vc/include/VG/openvg.h:591:37)"
  (path  :UINT) ;; path #<typedef VGPath>
)
(export '&get-path-capabilities)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:589:31)
;;
(declaim (inline &remove-path-capabilities))
(defcfun ("vgRemovePathCapabilities" &remove-path-capabilities) :VOID
  "see: (/opt/vc/include/VG/openvg.h:589:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (capabilities  :UINT) ;; capabilities #<typedef VGbitfield>
)
(export '&remove-path-capabilities)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:588:31)
;;
(declaim (inline &destroy-path))
(defcfun ("vgDestroyPath" &destroy-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:588:31)"
  (path  :UINT) ;; path #<typedef VGPath>
)
(export '&destroy-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:587:31)
;;
(declaim (inline &clear-path))
(defcfun ("vgClearPath" &clear-path) :VOID
  "see: (/opt/vc/include/VG/openvg.h:587:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (capabilities  :UINT) ;; capabilities #<typedef VGbitfield>
)
(export '&clear-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:193:9)
;;
(defcenum path-datatype ;; _VGPathDatatype
  (:path-datatype-s-8 #x0) ;;VG_PATH_DATATYPE_S_8
  (:path-datatype-s-16 #x1) ;;VG_PATH_DATATYPE_S_16
  (:path-datatype-s-32 #x2) ;;VG_PATH_DATATYPE_S_32
  (:path-datatype-f #x3) ;;VG_PATH_DATATYPE_F
  (:path-datatype-force-size #x7FFFFFFF) ;;VG_PATH_DATATYPE_FORCE_SIZE
)
(export 'path-datatype)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:581:33)
;;
(declaim (inline &create-path))
(defcfun ("vgCreatePath" &create-path) :UINT
  "see: (/opt/vc/include/VG/openvg.h:581:33)"
  (path-format  :INT) ;; pathFormat #<typedef VGint>
  (datatype  path-datatype) ;; datatype #<typedef VGPathDatatype>
  (scale  :FLOAT) ;; scale #<typedef VGfloat>
  (bias  :FLOAT) ;; bias #<typedef VGfloat>
  (segment-capacity-hint  :INT) ;; segmentCapacityHint #<typedef VGint>
  (coord-capacity-hint  :INT) ;; coordCapacityHint #<typedef VGint>
  (capabilities  :UINT) ;; capabilities #<typedef VGbitfield>
)
(export '&create-path)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:578:31)
;;
(declaim (inline &clear))
(defcfun ("vgClear" &clear) :VOID
  "see: (/opt/vc/include/VG/openvg.h:578:31)"
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&clear)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:574:31)
;;
(declaim (inline &copy-mask))
(defcfun ("vgCopyMask" &copy-mask) :VOID
  "see: (/opt/vc/include/VG/openvg.h:574:31)"
  (mask-layer  :UINT) ;; maskLayer #<typedef VGMaskLayer>
  (dx  :INT) ;; dx #<typedef VGint>
  (dy  :INT) ;; dy #<typedef VGint>
  (sx  :INT) ;; sx #<typedef VGint>
  (sy  :INT) ;; sy #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&copy-mask)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:570:31)
;;
(declaim (inline &fill-mask-layer))
(defcfun ("vgFillMaskLayer" &fill-mask-layer) :VOID
  "see: (/opt/vc/include/VG/openvg.h:570:31)"
  (mask-layer  :UINT) ;; maskLayer #<typedef VGMaskLayer>
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
  (value  :FLOAT) ;; value #<typedef VGfloat>
)
(export '&fill-mask-layer)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:569:31)
;;
(declaim (inline &destroy-mask-layer))
(defcfun ("vgDestroyMaskLayer" &destroy-mask-layer) :VOID
  "see: (/opt/vc/include/VG/openvg.h:569:31)"
  (mask-layer  :UINT) ;; maskLayer #<typedef VGMaskLayer>
)
(export '&destroy-mask-layer)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:568:38)
;;
(declaim (inline &create-mask-layer))
(defcfun ("vgCreateMaskLayer" &create-mask-layer) :UINT
  "see: (/opt/vc/include/VG/openvg.h:568:38)"
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&create-mask-layer)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:180:9)
;;
(defcenum mask-operation ;; _VGMaskOperation
  (:clear-mask #x1500) ;;VG_CLEAR_MASK
  (:fill-mask #x1501) ;;VG_FILL_MASK
  (:set-mask #x1502) ;;VG_SET_MASK
  (:union-mask #x1503) ;;VG_UNION_MASK
  (:intersect-mask #x1504) ;;VG_INTERSECT_MASK
  (:subtract-mask #x1505) ;;VG_SUBTRACT_MASK
  (:mask-operation-force-size #x7FFFFFFF) ;;VG_MASK_OPERATION_FORCE_SIZE
)
(export 'mask-operation)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:565:31)
;;
(declaim (inline &render-to-mask))
(defcfun ("vgRenderToMask" &render-to-mask) :VOID
  "see: (/opt/vc/include/VG/openvg.h:565:31)"
  (path  :UINT) ;; path #<typedef VGPath>
  (paint-modes  :UINT) ;; paintModes #<typedef VGbitfield>
  (operation  mask-operation) ;; operation #<typedef VGMaskOperation>
)
(export '&render-to-mask)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:562:31)
;;
(declaim (inline &mask))
(defcfun ("vgMask" &mask) :VOID
  "see: (/opt/vc/include/VG/openvg.h:562:31)"
  (mask  :UINT) ;; mask #<typedef VGHandle>
  (operation  mask-operation) ;; operation #<typedef VGMaskOperation>
  (x  :INT) ;; x #<typedef VGint>
  (y  :INT) ;; y #<typedef VGint>
  (width  :INT) ;; width #<typedef VGint>
  (height  :INT) ;; height #<typedef VGint>
)
(export '&mask)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:559:31)
;;
(declaim (inline &rotate))
(defcfun ("vgRotate" &rotate) :VOID
  "see: (/opt/vc/include/VG/openvg.h:559:31)"
  (angle  :FLOAT) ;; angle #<typedef VGfloat>
)
(export '&rotate)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:558:31)
;;
(declaim (inline &shear))
(defcfun ("vgShear" &shear) :VOID
  "see: (/opt/vc/include/VG/openvg.h:558:31)"
  (shx  :FLOAT) ;; shx #<typedef VGfloat>
  (shy  :FLOAT) ;; shy #<typedef VGfloat>
)
(export '&shear)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:557:31)
;;
(declaim (inline &scale))
(defcfun ("vgScale" &scale) :VOID
  "see: (/opt/vc/include/VG/openvg.h:557:31)"
  (sx  :FLOAT) ;; sx #<typedef VGfloat>
  (sy  :FLOAT) ;; sy #<typedef VGfloat>
)
(export '&scale)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:556:31)
;;
(declaim (inline &translate))
(defcfun ("vgTranslate" &translate) :VOID
  "see: (/opt/vc/include/VG/openvg.h:556:31)"
  (tx  :FLOAT) ;; tx #<typedef VGfloat>
  (ty  :FLOAT) ;; ty #<typedef VGfloat>
)
(export '&translate)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:555:31)
;;
(declaim (inline &mult-matrix))
(defcfun ("vgMultMatrix" &mult-matrix) :VOID
  "see: (/opt/vc/include/VG/openvg.h:555:31)"
  (m  (:pointer :FLOAT)) ;; m #<POINTER #<typedef VGfloat>>
)
(export '&mult-matrix)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:554:31)
;;
(declaim (inline &get-matrix))
(defcfun ("vgGetMatrix" &get-matrix) :VOID
  "see: (/opt/vc/include/VG/openvg.h:554:31)"
  (m  (:pointer :FLOAT)) ;; m #<POINTER #<typedef VGfloat>>
)
(export '&get-matrix)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:553:31)
;;
(declaim (inline &load-matrix))
(defcfun ("vgLoadMatrix" &load-matrix) :VOID
  "see: (/opt/vc/include/VG/openvg.h:553:31)"
  (m  (:pointer :FLOAT)) ;; m #<POINTER #<typedef VGfloat>>
)
(export '&load-matrix)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:552:31)
;;
(declaim (inline &load-identity))
(defcfun ("vgLoadIdentity" &load-identity) :VOID
  "see: (/opt/vc/include/VG/openvg.h:552:31)"
)
(export '&load-identity)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:547:31)
;;
(declaim (inline &get-parameter-iv))
(defcfun ("vgGetParameteriv" &get-parameter-iv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:547:31)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :INT)) ;; values #<POINTER #<typedef VGint>>
)
(export '&get-parameter-iv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:544:31)
;;
(declaim (inline &get-parameter-fv))
(defcfun ("vgGetParameterfv" &get-parameter-fv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:544:31)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :FLOAT)) ;; values #<POINTER #<typedef VGfloat>>
)
(export '&get-parameter-fv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:542:32)
;;
(declaim (inline &get-parameter-vector-size))
(defcfun ("vgGetParameterVectorSize" &get-parameter-vector-size) :INT
  "see: (/opt/vc/include/VG/openvg.h:542:32)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
)
(export '&get-parameter-vector-size)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:540:32)
;;
(declaim (inline &get-parameter-i))
(defcfun ("vgGetParameteri" &get-parameter-i) :INT
  "see: (/opt/vc/include/VG/openvg.h:540:32)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
)
(export '&get-parameter-i)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:538:34)
;;
(declaim (inline &get-parameter-f))
(defcfun ("vgGetParameterf" &get-parameter-f) :FLOAT
  "see: (/opt/vc/include/VG/openvg.h:538:34)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
)
(export '&get-parameter-f)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:534:31)
;;
(declaim (inline &set-parameter-iv))
(defcfun ("vgSetParameteriv" &set-parameter-iv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:534:31)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :INT)) ;; values #<POINTER #<typedef VGint>>
)
(export '&set-parameter-iv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:531:31)
;;
(declaim (inline &set-parameter-fv))
(defcfun ("vgSetParameterfv" &set-parameter-fv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:531:31)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :FLOAT)) ;; values #<POINTER #<typedef VGfloat>>
)
(export '&set-parameter-fv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:528:31)
;;
(declaim (inline &set-parameter-i))
(defcfun ("vgSetParameteri" &set-parameter-i) :VOID
  "see: (/opt/vc/include/VG/openvg.h:528:31)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
  (value  :INT) ;; value #<typedef VGint>
)
(export '&set-parameter-i)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:525:31)
;;
(declaim (inline &set-parameter-f))
(defcfun ("vgSetParameterf" &set-parameter-f) :VOID
  "see: (/opt/vc/include/VG/openvg.h:525:31)"
  (object  :UINT) ;; object #<typedef VGHandle>
  (param-type  :INT) ;; paramType #<typedef VGint>
  (value  :FLOAT) ;; value #<typedef VGfloat>
)
(export '&set-parameter-f)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:87:9)
;;
(defcenum param-type ;; _VGParamType
  (:matrix-mode #x1100) ;;VG_MATRIX_MODE
  (:fill-rule #x1101) ;;VG_FILL_RULE
  (:image-quality #x1102) ;;VG_IMAGE_QUALITY
  (:rendering-quality #x1103) ;;VG_RENDERING_QUALITY
  (:blend-mode #x1104) ;;VG_BLEND_MODE
  (:image-mode #x1105) ;;VG_IMAGE_MODE
  (:scissor-rects #x1106) ;;VG_SCISSOR_RECTS
  (:color-transform #x1170) ;;VG_COLOR_TRANSFORM
  (:color-transform-values #x1171) ;;VG_COLOR_TRANSFORM_VALUES
  (:stroke-line-width #x1110) ;;VG_STROKE_LINE_WIDTH
  (:stroke-cap-style #x1111) ;;VG_STROKE_CAP_STYLE
  (:stroke-join-style #x1112) ;;VG_STROKE_JOIN_STYLE
  (:stroke-miter-limit #x1113) ;;VG_STROKE_MITER_LIMIT
  (:stroke-dash-pattern #x1114) ;;VG_STROKE_DASH_PATTERN
  (:stroke-dash-phase #x1115) ;;VG_STROKE_DASH_PHASE
  (:stroke-dash-phase-reset #x1116) ;;VG_STROKE_DASH_PHASE_RESET
  (:tile-fill-color #x1120) ;;VG_TILE_FILL_COLOR
  (:clear-color #x1121) ;;VG_CLEAR_COLOR
  (:glyph-origin #x1122) ;;VG_GLYPH_ORIGIN
  (:masking #x1130) ;;VG_MASKING
  (:scissoring #x1131) ;;VG_SCISSORING
  (:pixel-layout #x1140) ;;VG_PIXEL_LAYOUT
  (:screen-layout #x1141) ;;VG_SCREEN_LAYOUT
  (:filter-format-linear #x1150) ;;VG_FILTER_FORMAT_LINEAR
  (:filter-format-premultiplied #x1151) ;;VG_FILTER_FORMAT_PREMULTIPLIED
  (:filter-channel-mask #x1152) ;;VG_FILTER_CHANNEL_MASK
  (:max-scissor-rects #x1160) ;;VG_MAX_SCISSOR_RECTS
  (:max-dash-count #x1161) ;;VG_MAX_DASH_COUNT
  (:max-kernel-size #x1162) ;;VG_MAX_KERNEL_SIZE
  (:max-separable-kernel-size #x1163) ;;VG_MAX_SEPARABLE_KERNEL_SIZE
  (:max-color-ramp-stops #x1164) ;;VG_MAX_COLOR_RAMP_STOPS
  (:max-image-width #x1165) ;;VG_MAX_IMAGE_WIDTH
  (:max-image-height #x1166) ;;VG_MAX_IMAGE_HEIGHT
  (:max-image-pixels #x1167) ;;VG_MAX_IMAGE_PIXELS
  (:max-image-bytes #x1168) ;;VG_MAX_IMAGE_BYTES
  (:max-float #x1169) ;;VG_MAX_FLOAT
  (:max-gaussian-std-deviation #x116A) ;;VG_MAX_GAUSSIAN_STD_DEVIATION
  (:param-type-force-size #x7FFFFFFF) ;;VG_PARAM_TYPE_FORCE_SIZE
)
(export 'param-type)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:523:31)
;;
(declaim (inline &get-iv))
(defcfun ("vgGetiv" &get-iv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:523:31)"
  (type  param-type) ;; type #<typedef VGParamType>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :INT)) ;; values #<POINTER #<typedef VGint>>
)
(export '&get-iv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:522:31)
;;
(declaim (inline &get-fv))
(defcfun ("vgGetfv" &get-fv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:522:31)"
  (type  param-type) ;; type #<typedef VGParamType>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :FLOAT)) ;; values #<POINTER #<typedef VGfloat>>
)
(export '&get-fv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:521:32)
;;
(declaim (inline &get-vector-size))
(defcfun ("vgGetVectorSize" &get-vector-size) :INT
  "see: (/opt/vc/include/VG/openvg.h:521:32)"
  (type  param-type) ;; type #<typedef VGParamType>
)
(export '&get-vector-size)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:520:32)
;;
(declaim (inline &get-i))
(defcfun ("vgGeti" &get-i) :INT
  "see: (/opt/vc/include/VG/openvg.h:520:32)"
  (type  param-type) ;; type #<typedef VGParamType>
)
(export '&get-i)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:519:34)
;;
(declaim (inline &get-f))
(defcfun ("vgGetf" &get-f) :FLOAT
  "see: (/opt/vc/include/VG/openvg.h:519:34)"
  (type  param-type) ;; type #<typedef VGParamType>
)
(export '&get-f)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:516:31)
;;
(declaim (inline &set-iv))
(defcfun ("vgSetiv" &set-iv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:516:31)"
  (type  param-type) ;; type #<typedef VGParamType>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :INT)) ;; values #<POINTER #<typedef VGint>>
)
(export '&set-iv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:514:31)
;;
(declaim (inline &set-fv))
(defcfun ("vgSetfv" &set-fv) :VOID
  "see: (/opt/vc/include/VG/openvg.h:514:31)"
  (type  param-type) ;; type #<typedef VGParamType>
  (count  :INT) ;; count #<typedef VGint>
  (values  (:pointer :FLOAT)) ;; values #<POINTER #<typedef VGfloat>>
)
(export '&set-fv)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:513:31)
;;
(declaim (inline &set-i))
(defcfun ("vgSeti" &set-i) :VOID
  "see: (/opt/vc/include/VG/openvg.h:513:31)"
  (type  param-type) ;; type #<typedef VGParamType>
  (value  :INT) ;; value #<typedef VGint>
)
(export '&set-i)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:512:31)
;;
(declaim (inline &set-f))
(defcfun ("vgSetf" &set-f) :VOID
  "see: (/opt/vc/include/VG/openvg.h:512:31)"
  (type  param-type) ;; type #<typedef VGParamType>
  (value  :FLOAT) ;; value #<typedef VGfloat>
)
(export '&set-f)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:509:31)
;;
(declaim (inline &finish))
(defcfun ("vgFinish" &finish) :VOID
  "see: (/opt/vc/include/VG/openvg.h:509:31)"
)
(export '&finish)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:508:31)
;;
(declaim (inline &flush))
(defcfun ("vgFlush" &flush) :VOID
  "see: (/opt/vc/include/VG/openvg.h:508:31)"
)
(export '&flush)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:73:9)
;;
(defcenum error-code ;; _VGErrorCode
  (:no-error #x0) ;;VG_NO_ERROR
  (:bad-handle-error #x1000) ;;VG_BAD_HANDLE_ERROR
  (:illegal-argument-error #x1001) ;;VG_ILLEGAL_ARGUMENT_ERROR
  (:out-of-memory-error #x1002) ;;VG_OUT_OF_MEMORY_ERROR
  (:path-capability-error #x1003) ;;VG_PATH_CAPABILITY_ERROR
  (:unsupported-image-format-error #x1004) ;;VG_UNSUPPORTED_IMAGE_FORMAT_ERROR
  (:unsupported-path-format-error #x1005) ;;VG_UNSUPPORTED_PATH_FORMAT_ERROR
  (:image-in-use-error #x1006) ;;VG_IMAGE_IN_USE_ERROR
  (:no-context-error #x1007) ;;VG_NO_CONTEXT_ERROR
  (:error-code-force-size #x7FFFFFFF) ;;VG_ERROR_CODE_FORCE_SIZE
)
(export 'error-code)


;;------------------------------------------------------------------------------
;; (/opt/vc/include/VG/openvg.h:506:38)
;;
(declaim (inline &get-error))
(defcfun ("vgGetError" &get-error) error-code
  "see: (/opt/vc/include/VG/openvg.h:506:38)"
)
(export '&get-error)
