(in-package #:vgu)

(deftype handle ()
    `(integer 0 #xFFFFFFFF))
(eval-when (:execute :load-toplevel :compile-toplevel)
  (defparameter *opt-speed* 3)
  (defparameter *opt-safety* 0)
  (defparameter *opt-debug* 0))
;;-----------------------------------------------------------------------------
(defun compute-warp-quad-to-quad ( dx0 dy0 dx1 dy1 dx2 dy2 dx3 dy3 sx0 sy0 sx1 sy1 sx2 sy2 sx3 sy3 matrix) 
  (declare (type float dx0))
  (declare (type float dy0))
  (declare (type float dx1))
  (declare (type float dy1))
  (declare (type float dx2))
  (declare (type float dy2))
  (declare (type float dx3))
  (declare (type float dy3))
  (declare (type float sx0))
  (declare (type float sy0))
  (declare (type float sx1))
  (declare (type float sy1))
  (declare (type float sx2))
  (declare (type float sy2))
  (declare (type float sx3))
  (declare (type float sy3))
  (declare (type cffi-sys:foreign-pointer matrix))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&compute-warp-quad-to-quad dx0 dy0 dx1 dy1 dx2 dy2 dx3 dy3 sx0 sy0 sx1 sy1 sx2 sy2 sx3 sy3 matrix))
(export 'compute-warp-quad-to-quad)


;;-----------------------------------------------------------------------------
(defun compute-warp-square-to-quad ( dx0 dy0 dx1 dy1 dx2 dy2 dx3 dy3 matrix) 
  (declare (type float dx0))
  (declare (type float dy0))
  (declare (type float dx1))
  (declare (type float dy1))
  (declare (type float dx2))
  (declare (type float dy2))
  (declare (type float dx3))
  (declare (type float dy3))
  (declare (type cffi-sys:foreign-pointer matrix))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&compute-warp-square-to-quad dx0 dy0 dx1 dy1 dx2 dy2 dx3 dy3 matrix))
(export 'compute-warp-square-to-quad)


;;-----------------------------------------------------------------------------
(defun compute-warp-quad-to-square ( sx0 sy0 sx1 sy1 sx2 sy2 sx3 sy3 matrix) 
  (declare (type float sx0))
  (declare (type float sy0))
  (declare (type float sx1))
  (declare (type float sy1))
  (declare (type float sx2))
  (declare (type float sy2))
  (declare (type float sx3))
  (declare (type float sy3))
  (declare (type cffi-sys:foreign-pointer matrix))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&compute-warp-quad-to-square sx0 sy0 sx1 sy1 sx2 sy2 sx3 sy3 matrix))
(export 'compute-warp-quad-to-square)


;;-----------------------------------------------------------------------------
(defun arc ( path x y width height start-angle angle-extent arc-type) 
  (declare (type handle  path))
  (declare (type float x))
  (declare (type float y))
  (declare (type float width))
  (declare (type float height))
  (declare (type float start-angle))
  (declare (type float angle-extent))
  (declare (type fixnum arc-type))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&arc path x y width height start-angle angle-extent arc-type))
(export 'arc)

(defun error-check (fun &rest params)
  (declare (type function fun))
   (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
   (let ((result (funcall fun params)))
     (declare (type fixnum result))
     (unless (zerop result)
      (error "vgu error ~X in ~A ~A " result fun params ))))
;;-----------------------------------------------------------------------------
(defun ellipse (path cx cy width &optional (height width)) 
  (declare (type handle path))
  (declare (type float cx cy width height))
  (declare (optimize (speed #.*opt-speed*) 
		     (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&ellipse path cx cy width height))
;;  (error-check #'&ellipse path cx cy width height)
  
(export 'ellipse)


;;-----------------------------------------------------------------------------
(defun round-rect ( path x y width height arc-width arc-height) 
  (declare (type handle path))
  (declare (type float x))
  (declare (type float y))
  (declare (type float width))
  (declare (type float height))
  (declare (type float arc-width))
  (declare (type float arc-height))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&round-rect path x y width height arc-width arc-height))
(export 'round-rect)


;;-----------------------------------------------------------------------------
(defun rect ( path x y width height) 
  (declare (type handle path))
  (declare (type float x))
  (declare (type float y))
  (declare (type float width))
  (declare (type float height))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&rect path x y width height))
(export 'rect)


;;-----------------------------------------------------------------------------
(defun polygon ( path points count closed) 
  (declare (type handle path))
  (declare (type cffi-sys:foreign-pointer points))
  (declare (type integer count))
  (declare (type integer closed))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&polygon path points count closed))
(export 'polygon)


;;-----------------------------------------------------------------------------
(defun line ( path x0 y0 x1 y1) 
  (declare (type handle path))
  (declare (type float x0))
  (declare (type float y0))
  (declare (type float x1))
  (declare (type float y1))
  (declare (optimize (speed #.*opt-speed*) 
    (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&line path x0 y0 x1 y1))
(export 'line)
