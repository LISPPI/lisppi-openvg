;; Generated by WHAT-THE-FFI
(in-package #:vg)
(defparameter path-format-standard 0)
(export 'path-format-standard)
(eval-when (:execute :load-toplevel :compile-toplevel)
  (defparameter *opt-speed* 0)
  (defparameter *opt-safety* 3)
  (defparameter *opt-debug* 3)) 
(deftype handle ()
    `(integer 0 #xFFFFFFFF))
;;-----------------------------------------------------------------------------
(defun get-string ( name) 
  (declare (type fixnum name))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-string name))
(export 'get-string)


;;-----------------------------------------------------------------------------
(defun hardware-query ( key setting) 
  (declare (type fixnum key))
  (declare (type integer setting))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&hardware-query key setting))
(export 'hardware-query)


;;-----------------------------------------------------------------------------
(defun lookup-single ( dst src lookup-table source-channel output-linear output-premultiplied) 
  (declare (type handle src dst))
  (declare (type cffi-sys:foreign-pointer lookup-table))
  (declare (type fixnum source-channel))
  (declare (type integer output-linear))
  (declare (type integer output-premultiplied))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&lookup-single dst src lookup-table source-channel output-linear output-premultiplied))
(export 'lookup-single)


;;-----------------------------------------------------------------------------
(defun lookup ( dst src red-lut green-lut blue-lut alpha-lut output-linear output-premultiplied) 
  (declare (type handle dst src))
  (declare (type cffi-sys:foreign-pointer red-lut))
  (declare (type cffi-sys:foreign-pointer green-lut))
  (declare (type cffi-sys:foreign-pointer blue-lut))
  (declare (type cffi-sys:foreign-pointer alpha-lut))
  (declare (type integer output-linear))
  (declare (type integer output-premultiplied))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&lookup dst src red-lut green-lut blue-lut alpha-lut output-linear output-premultiplied))
(export 'lookup)


;;-----------------------------------------------------------------------------
(defun gaussian-blur ( dst src std-deviation-x std-deviation-y tiling-mode) 
  (declare (type handle dst src))
  (declare (type float std-deviation-x))
  (declare (type float std-deviation-y))
  (declare (type fixnum tiling-mode))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&gaussian-blur dst src std-deviation-x std-deviation-y tiling-mode))
(export 'gaussian-blur)


;;-----------------------------------------------------------------------------
(defun separable-convolve ( dst src kernel-width kernel-height shift-x shift-y kernel-x kernel-y scale bias tiling-mode) 
  (declare (type handle dst src))
  (declare (type fixnum kernel-width))
  (declare (type fixnum kernel-height))
  (declare (type fixnum shift-x))
  (declare (type fixnum shift-y))
  (declare (type cffi-sys:foreign-pointer kernel-x))
  (declare (type cffi-sys:foreign-pointer kernel-y))
  (declare (type float scale))
  (declare (type float bias))
  (declare (type fixnum tiling-mode))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&separable-convolve dst src kernel-width kernel-height shift-x shift-y kernel-x kernel-y scale bias tiling-mode))
(export 'separable-convolve)


;;-----------------------------------------------------------------------------
(defun convolve ( dst src kernel-width kernel-height shift-x shift-y kernel scale bias tiling-mode) 
  (declare (type handle dst src))
  (declare (type fixnum kernel-width))
  (declare (type fixnum kernel-height))
  (declare (type fixnum shift-x))
  (declare (type fixnum shift-y))
  (declare (type cffi-sys:foreign-pointer kernel))
  (declare (type float scale))
  (declare (type float bias))
  (declare (type fixnum tiling-mode))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&convolve dst src kernel-width kernel-height shift-x shift-y kernel scale bias tiling-mode))
(export 'convolve)


;;-----------------------------------------------------------------------------
(defun color-matrix ( dst src matrix) 
  (declare (type handle dst src))
  (declare (type cffi-sys:foreign-pointer matrix))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&color-matrix dst src matrix))
(export 'color-matrix)


;;-----------------------------------------------------------------------------
(defun draw-glyphs ( font glyph-count glyph-indices adjustments-x adjustments-y paint-modes allow-auto-hinting) 
  (declare (type handle font))
  (declare (type fixnum glyph-count))
  (declare (type cffi-sys:foreign-pointer glyph-indices))
  (declare (type cffi-sys:foreign-pointer adjustments-x))
  (declare (type cffi-sys:foreign-pointer adjustments-y))
  (declare (type fixnum paint-modes))
  (declare (type fixnum allow-auto-hinting))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&draw-glyphs font glyph-count glyph-indices adjustments-x adjustments-y paint-modes allow-auto-hinting))
(export 'draw-glyphs)


;;-----------------------------------------------------------------------------
(defun draw-glyph ( font glyph-index paint-modes allow-auto-hinting) 
  (declare (type handle font))
  (declare (type fixnum glyph-index))
  (declare (type fixnum paint-modes))
  (declare (type fixnum allow-auto-hinting))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&draw-glyph font glyph-index paint-modes allow-auto-hinting))
(export 'draw-glyph)


;;-----------------------------------------------------------------------------
(defun clear-glyph ( font glyph-index) 
  (declare (type handle font))
  (declare (type fixnum glyph-index))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&clear-glyph font glyph-index))
(export 'clear-glyph)


;;-----------------------------------------------------------------------------
(defun set-glyph-to-image ( font glyph-index image glyph-origin escapement) 
  (declare (type handle font))
  (declare (type fixnum glyph-index))
  (declare (type handle image))
  (declare (type cffi-sys:foreign-pointer glyph-origin))
  (declare (type cffi-sys:foreign-pointer escapement))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-glyph-to-image font glyph-index image glyph-origin escapement))
(export 'set-glyph-to-image)


;;-----------------------------------------------------------------------------
(defun set-glyph-to-path ( font glyph-index path is-hinted glyph-origin escapement) 
  (declare (type handle font))
  (declare (type fixnum glyph-index))
  (declare (type handle path))
  (declare (type fixnum is-hinted))
  (declare (type cffi-sys:foreign-pointer glyph-origin))
  (declare (type cffi-sys:foreign-pointer escapement))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-glyph-to-path font glyph-index path is-hinted glyph-origin escapement))
(export 'set-glyph-to-path)


;;-----------------------------------------------------------------------------
(defun destroy-font ( font) 
  (declare (type handle font))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&destroy-font font))
(export 'destroy-font)


;;-----------------------------------------------------------------------------
(defun create-font ( glyph-capacity-hint) 
  (declare (type fixnum glyph-capacity-hint))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&create-font glyph-capacity-hint))
(export 'create-font)


;;-----------------------------------------------------------------------------
(defun copy-pixels ( dx dy sx sy width height) 
  (declare (type fixnum dx))
  (declare (type fixnum dy))
  (declare (type fixnum sx))
  (declare (type fixnum sy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&copy-pixels dx dy sx sy width height))
(export 'copy-pixels)


;;-----------------------------------------------------------------------------
(defun read-pixels ( data data-stride data-format sx sy width height) 
  (declare (type cffi-sys:foreign-pointer data))
  (declare (type fixnum data-stride))
  (declare (type fixnum data-format))
  (declare (type fixnum sx))
  (declare (type fixnum sy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&read-pixels data data-stride data-format sx sy width height))
(export 'read-pixels)


;;-----------------------------------------------------------------------------
(defun get-pixels ( dst dx dy sx sy width height) 
  (declare (type handle dst))
  (declare (type fixnum dx))
  (declare (type fixnum dy))
  (declare (type fixnum sx))
  (declare (type fixnum sy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-pixels dst dx dy sx sy width height))
(export 'get-pixels)


;;-----------------------------------------------------------------------------
(defun write-pixels ( data data-stride data-format dx dy width height) 
  (declare (type cffi-sys:foreign-pointer data))
  (declare (type fixnum data-stride))
  (declare (type fixnum data-format))
  (declare (type fixnum dx))
  (declare (type fixnum dy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&write-pixels data data-stride data-format dx dy width height))
(export 'write-pixels)


;;-----------------------------------------------------------------------------
(defun set-pixels ( dx dy src sx sy width height) 
  (declare (type fixnum dx))
  (declare (type fixnum dy))
  (declare (type handle src))
  (declare (type fixnum sx))
  (declare (type fixnum sy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-pixels dx dy src sx sy width height))
(export 'set-pixels)


;;-----------------------------------------------------------------------------
(defun draw-image ( image) 
  (declare (type handle image))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&draw-image image))
(export 'draw-image)


;;-----------------------------------------------------------------------------
(defun copy-image ( dst dx dy src sx sy width height dither) 
  (declare (type handle dst))
  (declare (type fixnum dx))
  (declare (type fixnum dy))
  (declare (type handle src))
  (declare (type fixnum sx))
  (declare (type fixnum sy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (type fixnum dither))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&copy-image dst dx dy src sx sy width height dither))
(export 'copy-image)


;;-----------------------------------------------------------------------------
(defun get-parent ( image) 
  (declare (type handle image))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-parent image))
(export 'get-parent)


;;-----------------------------------------------------------------------------
(defun child-image ( parent x y width height) 
  (declare (type handle parent))
  (declare (type fixnum x))
  (declare (type fixnum y))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&child-image parent x y width height))
(export 'child-image)


;;-----------------------------------------------------------------------------
(defun get-image-sub-data ( image data data-stride data-format x y width height) 
  (declare (type handle image))
  (declare (type cffi-sys:foreign-pointer data))
  (declare (type fixnum data-stride))
  (declare (type fixnum data-format))
  (declare (type fixnum x))
  (declare (type fixnum y))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-image-sub-data image data data-stride data-format x y width height)
  nil)
(export 'get-image-sub-data)


;;-----------------------------------------------------------------------------
(defun image-sub-data ( image data data-stride data-format x y width height) 
  (declare (type handle image))
  (declare (type cffi-sys:foreign-pointer data))
  (declare (type fixnum data-stride))
  (declare (type fixnum data-format))
  (declare (type fixnum x))
  (declare (type fixnum y))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&image-sub-data image data data-stride data-format x y width height)
  nil)

(export 'image-sub-data)


;;-----------------------------------------------------------------------------
(defun clear-image ( image x y width height) 
  (declare (type handle image))
  (declare (type fixnum x))
  (declare (type fixnum y))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&clear-image image x y width height))
(export 'clear-image)


;;-----------------------------------------------------------------------------
(defun destroy-image ( image) 
  (declare (type handle image))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&destroy-image image))
(export 'destroy-image)


;;-----------------------------------------------------------------------------
(defun create-image ( format width height allowed-quality) 
  (declare (type fixnum format))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (type fixnum allowed-quality))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&create-image format width height allowed-quality))
(export 'create-image)


;;-----------------------------------------------------------------------------
(defun paint-pattern ( paint pattern) 
  (declare (type handle paint pattern))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&paint-pattern paint pattern))
(export 'paint-pattern)


;;-----------------------------------------------------------------------------
(defun get-color ( paint) 
  (declare (type handle paint))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-color paint))
(export 'get-color)


;;-----------------------------------------------------------------------------
(defun set-color ( paint rgba) 
  (declare (type handle paint))
  (declare (type handle rgba))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-color paint rgba))
(export 'set-color)


;;-----------------------------------------------------------------------------
(defun get-paint ( paint-mode) 
  (declare (type fixnum paint-mode))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-paint paint-mode))
(export 'get-paint)


;;-----------------------------------------------------------------------------
(defun set-paint ( paint paint-modes) 
  (declare (type handle paint))
  (declare (type fixnum paint-modes))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-paint paint paint-modes))
(export 'set-paint)


;;-----------------------------------------------------------------------------
(defun destroy-paint ( paint) 
  (declare (type handle paint))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&destroy-paint paint))
(export 'destroy-paint)


;;-----------------------------------------------------------------------------
(defun create-paint () 
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
;;  
  (&create-paint))
(export 'create-paint)


;;-----------------------------------------------------------------------------
(defun draw-path ( path paint-modes) 
  (declare (type handle path))
  (declare (type fixnum paint-modes))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&draw-path path paint-modes)
  nil)
(export 'draw-path)


;;-----------------------------------------------------------------------------
(defun path-transformed-bounds ( path min-x min-y width height) 
  (declare (type handle path))
  (declare (type cffi-sys:foreign-pointer min-x))
  (declare (type cffi-sys:foreign-pointer min-y))
  (declare (type cffi-sys:foreign-pointer width))
  (declare (type cffi-sys:foreign-pointer height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&path-transformed-bounds path min-x min-y width height))
(export 'path-transformed-bounds)


;;-----------------------------------------------------------------------------
(defun path-bounds ( path min-x min-y width height) 
  (declare (type handle path))
  (declare (type cffi-sys:foreign-pointer min-x))
  (declare (type cffi-sys:foreign-pointer min-y))
  (declare (type cffi-sys:foreign-pointer width))
  (declare (type cffi-sys:foreign-pointer height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&path-bounds path min-x min-y width height))
(export 'path-bounds)


;;-----------------------------------------------------------------------------
(defun point-along-path ( path start-segment num-segments distance x y tangent-x tangent-y) 
  (declare (type handle path))
  (declare (type fixnum start-segment num-segments))
  (declare (type float distance))
  (declare (type cffi-sys:foreign-pointer x))
  (declare (type cffi-sys:foreign-pointer y))
  (declare (type cffi-sys:foreign-pointer tangent-x))
  (declare (type cffi-sys:foreign-pointer tangent-y))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&point-along-path path start-segment num-segments distance x y tangent-x tangent-y))
(export 'point-along-path)


;;-----------------------------------------------------------------------------
(defun path-length ( path start-segment num-segments) 
  (declare (type handle path)
	   (type fixnum start-segment num-segments))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&path-length path start-segment num-segments))
(export 'path-length)


;;-----------------------------------------------------------------------------
(defun interpolate-path ( dst-path start-path end-path amount)
  (declare (type handle dst-path start-path end-path))
  (declare (type float amount))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&interpolate-path dst-path start-path end-path amount))
(export 'interpolate-path)


;;-----------------------------------------------------------------------------
(defun transform-path ( dst-path src-path) 
  (declare (type handle dst-path src-path))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&transform-path dst-path src-path))
(export 'transform-path)


;;-----------------------------------------------------------------------------
(defun modify-path-coords ( dst-path start-index num-segments path-data)
  (declare (type handle dst-path)
	   (type fixnum start-index num-segments))
  (declare (type cffi-sys:foreign-pointer path-data))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&modify-path-coords dst-path start-index num-segments path-data))
(export 'modify-path-coords)


;;-----------------------------------------------------------------------------
(defun append-path-data ( dst-path num-segments path-segments path-data)
  (declare (type handle dst-path))
  (declare (type fixnum num-segments))
  (declare (type cffi-sys:foreign-pointer path-segments))
  (declare (type cffi-sys:foreign-pointer path-data))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&append-path-data dst-path num-segments path-segments path-data))
(export 'append-path-data)


;;-----------------------------------------------------------------------------
(defun append-path ( dst-path src-path) 
  (declare (type handle dst-path src-path))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&append-path dst-path src-path))
(export 'append-path)


;;-----------------------------------------------------------------------------
(defun get-path-capabilities ( path)
  (declare (type handle path))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-path-capabilities path))
(export 'get-path-capabilities)


;;-----------------------------------------------------------------------------
(defun remove-path-capabilities ( path capabilities) 
  (declare (type handle path))
  (declare (type fixnum capabilities))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&remove-path-capabilities path capabilities))
(export 'remove-path-capabilities)


;;-----------------------------------------------------------------------------
(defun destroy-path ( path) 
  (declare (type handle path))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&destroy-path path))
(export 'destroy-path)


;;-----------------------------------------------------------------------------
(defun clear-path ( path capabilities) 
  (declare (type handle path))
  (declare (type fixnum capabilities))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&clear-path path capabilities))
(export 'clear-path)


;;-----------------------------------------------------------------------------
(defun create-path ( path-format datatype scale bias segment-capacity-hint coord-capacity-hint capabilities) 
  (declare (type fixnum path-format))
  (declare (type fixnum datatype))
  (declare (type float scale))
  (declare (type float bias))
  (declare (type fixnum segment-capacity-hint))
  (declare (type fixnum coord-capacity-hint))
  (declare (type fixnum capabilities))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&create-path path-format datatype scale bias segment-capacity-hint coord-capacity-hint capabilities))
(export 'create-path)


;;-----------------------------------------------------------------------------
(defun clear ( x y width height) 
  (declare (type fixnum x y width height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&clear x y width height)
  nil)

(export 'clear)


;;-----------------------------------------------------------------------------
(defun copy-mask ( mask-layer dx dy sx sy width height) 
  (declare (type handle mask-layer))
  (declare (type fixnum dx))
  (declare (type fixnum dy))
  (declare (type fixnum sx))
  (declare (type fixnum sy))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&copy-mask mask-layer dx dy sx sy width height))
(export 'copy-mask)


;;-----------------------------------------------------------------------------
(defun fill-mask-layer ( mask-layer x y width height value) 
  (declare (type handle mask-layer))
  (declare (type fixnum x))
  (declare (type fixnum y))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (type float value))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&fill-mask-layer mask-layer x y width height value))
(export 'fill-mask-layer)


;;-----------------------------------------------------------------------------
(defun destroy-mask-layer ( mask-layer) 
  (declare (type handle mask-layer))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&destroy-mask-layer mask-layer))
(export 'destroy-mask-layer)


;;-----------------------------------------------------------------------------
(defun create-mask-layer ( width height) 
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&create-mask-layer width height))
(export 'create-mask-layer)


;;-----------------------------------------------------------------------------
(defun render-to-mask ( path paint-modes operation) 
  (declare (type integer path))
  (declare (type fixnum paint-modes))
  (declare (type fixnum operation))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&render-to-mask path paint-modes operation))
(export 'render-to-mask)


;;-----------------------------------------------------------------------------
(defun mask ( mask operation x y width height) 
  (declare (type handle mask))
  (declare (type fixnum operation))
  (declare (type fixnum x))
  (declare (type fixnum y))
  (declare (type fixnum width))
  (declare (type fixnum height))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&mask mask operation x y width height))
(export 'mask)


;;-----------------------------------------------------------------------------
(defun rotate ( angle) 
  (declare (type float angle))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&rotate angle)
  nil)
(export 'rotate)


;;-----------------------------------------------------------------------------
(defun shear ( shx shy) 
  (declare (type float shx))
  (declare (type float shy))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&shear shx shy)
  nil)
(export 'shear)


;;-----------------------------------------------------------------------------
(defun scale ( sx sy) 
  (declare (type float sx))
  (declare (type float sy))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&scale sx sy)
  nil)
(export 'scale)


;;-----------------------------------------------------------------------------
(defun translate ( tx ty) 
  (declare (type float tx))
  (declare (type float ty))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&translate tx ty)
  nil)
(export 'translate)


;;-----------------------------------------------------------------------------
(defun mult-matrix ( m) 
  (declare (type cffi-sys:foreign-pointer m))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&mult-matrix m))
(export 'mult-matrix)


;;-----------------------------------------------------------------------------
(defun get-matrix ( m) 
  (declare (type cffi-sys:foreign-pointer m))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-matrix m))
(export 'get-matrix)


;;-----------------------------------------------------------------------------
(defun load-matrix ( m) 
  (declare (type cffi-sys:foreign-pointer m))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&load-matrix m))
(export 'load-matrix)


;;-----------------------------------------------------------------------------
(defun load-identity () 
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&load-identity))
(export 'load-identity)


;;-----------------------------------------------------------------------------
(defun get-parameter-iv ( object param-type count values) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-parameter-iv object param-type count values))
(export 'get-parameter-iv)


;;-----------------------------------------------------------------------------
(defun get-parameter-fv ( object param-type count values) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-parameter-fv object param-type count values))
(export 'get-parameter-fv)


;;-----------------------------------------------------------------------------
(defun get-parameter-vector-size ( object param-type) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-parameter-vector-size object param-type))
(export 'get-parameter-vector-size)


;;-----------------------------------------------------------------------------
(defun get-parameter-i ( object param-type) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-parameter-i object param-type))
(export 'get-parameter-i)


;;-----------------------------------------------------------------------------
(defun get-parameter-f ( object param-type) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-parameter-f object param-type))
(export 'get-parameter-f)


;;-----------------------------------------------------------------------------
(defun set-parameter-iv ( object param-type count values) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-parameter-iv object param-type count values)
  nil)
(export 'set-parameter-iv)


;;-----------------------------------------------------------------------------
(defun set-parameter-fv ( object param-type count values) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-parameter-fv object param-type count values)
  nil)
(export 'set-parameter-fv)


;;-----------------------------------------------------------------------------
(defun set-parameter-i ( object param-type value) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (type integer value))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-parameter-i object param-type value)
  nil)
(export 'set-parameter-i)


;;-----------------------------------------------------------------------------
(defun set-parameter-f ( object param-type value) 
  (declare (type handle object))
  (declare (type fixnum param-type))
  (declare (type float value))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-parameter-f object param-type value))
(export 'set-parameter-f)


;;-----------------------------------------------------------------------------
(defun get-iv ( type count values) 
  (declare (type fixnum type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-iv type count values))
(export 'get-iv)


;;-----------------------------------------------------------------------------
(defun get-fv ( type count values) 
  (declare (type fixnum type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-fv type count values))
(export 'get-fv)


;;-----------------------------------------------------------------------------
(defun get-vector-size ( type) 
  (declare (type fixnum type))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-vector-size type))
(export 'get-vector-size)


;;-----------------------------------------------------------------------------
(defun get-i ( type) 
  (declare (type fixnum type))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-i type))
(export 'get-i)


;;-----------------------------------------------------------------------------
(defun get-f ( type) 
  (declare (type fixnum type))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-f type))
(export 'get-f)


;;-----------------------------------------------------------------------------
(defun set-iv ( type count values) 
  (declare (type fixnum type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-iv type count values))
(export 'set-iv)


;;-----------------------------------------------------------------------------
(defun set-fv ( type count values) 
  (declare (type fixnum type))
  (declare (type fixnum count))
  (declare (type cffi-sys:foreign-pointer values))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-fv type count values))
(export 'set-fv)


;;-----------------------------------------------------------------------------
(defun set-i ( type value) 
  (declare (type fixnum type))
  (declare (type integer value))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-i type value))
(export 'set-i)


;;-----------------------------------------------------------------------------
(defun set-f ( type value) 
  (declare (type fixnum type))
  (declare (type float value))
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&set-f type value))
(export 'set-f)


;;-----------------------------------------------------------------------------
(defun finish () 
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&finish))
(export 'finish)


;;-----------------------------------------------------------------------------
(defun flush () 
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&flush))
(export 'flush)


;;-----------------------------------------------------------------------------
(defun get-error () 
  (declare (optimize (speed #.*opt-speed*) (safety #.*opt-safety*) (debug #.*opt-debug*)))
  (&get-error))
(export 'get-error)




(defmacro with-paint ((var) &body body)
  `(let ((,var (vg::create-paint)))
     (declare (type handle ,var))
     ,@body
     (vg::destroy-paint ,var)))
(export 'with-paint)

(defmacro with-path ((var path) &body body)
  `(let ((,var ,path))
     (declare (type handle ,var))
     ,@body
     (vg::destroy-path ,var)))
(export 'with-path)

(defmacro with-image ((var image-format width height allowed-quality) &body body)
  `(let ((,var (create-image ,image-format ,width ,height ,allowed-quality)))
     (declare (type handle ,var))
     ,@body
     (vg::destroy-image ,var)))
(export 'with-image)


(defparameter *error-array*
  (make-array 8 :initial-contents '("Bad Handle" "Illegal Argument" "Out of Memory" "Path Capability" "Unsupporter Image Format" "Unsupported Path Format" "Image in Use" "No Context")))

(defun error-msg (error-code)
  (if (zerop error-code )
      "Success"
      (if (and (>= error-code #x1000)
	       (<= error-code #x1007))
	  (aref *error-array* (- error-code #x1000))
	  (format nil "Unknown error code ~x" error-code))))
(export 'error-msg)
