;; Generated by WHAT-THE-FFI
(in-package #:vg)

(defparameter PATH-FORMAT-STANDARD 0)
(export 'path-format-standard)
;;-----------------------------------------------------------------------------
(defun get-string ( name)
  (&get-string name))
(export 'get-string)


;;-----------------------------------------------------------------------------
(defun hardware-query ( key setting)
  (&hardware-query key setting))
(export 'hardware-query)


;;-----------------------------------------------------------------------------
(defun lookup-single ( dst src lookupTable sourceChannel outputLinear outputPremultiplied)
  (&lookup-single dst src lookupTable sourceChannel outputLinear outputPremultiplied))
(export 'lookup-single)


;;-----------------------------------------------------------------------------
(defun lookup ( dst src redLUT greenLUT blueLUT alphaLUT outputLinear outputPremultiplied)
  (&lookup dst src redLUT greenLUT blueLUT alphaLUT outputLinear outputPremultiplied))
(export 'lookup)


;;-----------------------------------------------------------------------------
(defun gaussian-blur ( dst src stdDeviationX stdDeviationY tilingMode)
  (&gaussian-blur dst src stdDeviationX stdDeviationY tilingMode))
(export 'gaussian-blur)


;;-----------------------------------------------------------------------------
(defun separable-convolve ( dst src kernelWidth kernelHeight shiftX shiftY kernelX kernelY scale bias tilingMode)
  (&separable-convolve dst src kernelWidth kernelHeight shiftX shiftY kernelX kernelY scale bias tilingMode))
(export 'separable-convolve)


;;-----------------------------------------------------------------------------
(defun convolve ( dst src kernelWidth kernelHeight shiftX shiftY kernel scale bias tilingMode)
  (&convolve dst src kernelWidth kernelHeight shiftX shiftY kernel scale bias tilingMode))
(export 'convolve)


;;-----------------------------------------------------------------------------
(defun color-matrix ( dst src matrix)
  (&color-matrix dst src matrix))
(export 'color-matrix)


;;-----------------------------------------------------------------------------
(defun draw-glyphs ( font glyphCount glyphIndices adjustments_x adjustments_y paintModes allowAutoHinting)
  (&draw-glyphs font glyphCount glyphIndices adjustments_x adjustments_y paintModes allowAutoHinting))
(export 'draw-glyphs)


;;-----------------------------------------------------------------------------
(defun draw-glyph ( font glyphIndex paintModes allowAutoHinting)
  (&draw-glyph font glyphIndex paintModes allowAutoHinting))
(export 'draw-glyph)


;;-----------------------------------------------------------------------------
(defun clear-glyph ( font glyphIndex)
  (&clear-glyph font glyphIndex))
(export 'clear-glyph)


;;-----------------------------------------------------------------------------
(defun set-glyph-to-image ( font glyphIndex image glyphOrigin escapement)
  (&set-glyph-to-image font glyphIndex image glyphOrigin escapement))
(export 'set-glyph-to-image)


;;-----------------------------------------------------------------------------
(defun set-glyph-to-path ( font glyphIndex path isHinted glyphOrigin escapement)
  (&set-glyph-to-path font glyphIndex path isHinted glyphOrigin escapement))
(export 'set-glyph-to-path)


;;-----------------------------------------------------------------------------
(defun destroy-font ( font)
  (&destroy-font font))
(export 'destroy-font)


;;-----------------------------------------------------------------------------
(defun create-font ( glyphCapacityHint)
  (&create-font glyphCapacityHint))
(export 'create-font)


;;-----------------------------------------------------------------------------
(defun copy-pixels ( dx dy sx sy width height)
  (&copy-pixels dx dy sx sy width height))
(export 'copy-pixels)


;;-----------------------------------------------------------------------------
(defun read-pixels ( data dataStride dataFormat sx sy width height)
  (&read-pixels data dataStride dataFormat sx sy width height))
(export 'read-pixels)


;;-----------------------------------------------------------------------------
(defun get-pixels ( dst dx dy sx sy width height)
  (&get-pixels dst dx dy sx sy width height))
(export 'get-pixels)


;;-----------------------------------------------------------------------------
(defun write-pixels ( data dataStride dataFormat dx dy width height)
  (&write-pixels data dataStride dataFormat dx dy width height))
(export 'write-pixels)


;;-----------------------------------------------------------------------------
(defun set-pixels ( dx dy src sx sy width height)
  (&set-pixels dx dy src sx sy width height))
(export 'set-pixels)


;;-----------------------------------------------------------------------------
(defun draw-image ( image)
  (&draw-image image))
(export 'draw-image)


;;-----------------------------------------------------------------------------
(defun copy-image ( dst dx dy src sx sy width height dither)
  (&copy-image dst dx dy src sx sy width height dither))
(export 'copy-image)


;;-----------------------------------------------------------------------------
(defun get-parent ( image)
  (&get-parent image))
(export 'get-parent)


;;-----------------------------------------------------------------------------
(defun child-image ( parent x y width height)
  (&child-image parent x y width height))
(export 'child-image)


;;-----------------------------------------------------------------------------
(defun get-image-sub-data ( image data dataStride dataFormat x y width height)
  (&get-image-sub-data image data dataStride dataFormat x y width height))
(export 'get-image-sub-data)


;;-----------------------------------------------------------------------------
(defun image-sub-data ( image data dataStride dataFormat x y width height)
  (&image-sub-data image data dataStride dataFormat x y width height))
(export 'image-sub-data)


;;-----------------------------------------------------------------------------
(defun clear-image ( image x y width height)
  (&clear-image image x y width height))
(export 'clear-image)


;;-----------------------------------------------------------------------------
(defun destroy-image ( image)
  (&destroy-image image))
(export 'destroy-image)


;;-----------------------------------------------------------------------------
(defun create-image ( format width height allowedQuality)
  (&create-image format width height allowedQuality))
(export 'create-image)


;;-----------------------------------------------------------------------------
(defun paint-pattern ( paint pattern)
  (&paint-pattern paint pattern))
(export 'paint-pattern)


;;-----------------------------------------------------------------------------
(defun get-color ( paint)
  (&get-color paint))
(export 'get-color)


;;-----------------------------------------------------------------------------
(defun set-color ( paint rgba)
  (&set-color paint rgba))
(export 'set-color)


;;-----------------------------------------------------------------------------
(defun get-paint ( paintMode)
  (&get-paint paintMode))
(export 'get-paint)


;;-----------------------------------------------------------------------------
(defun set-paint ( paint paintModes)
  (&set-paint paint paintModes))
(export 'set-paint)


;;-----------------------------------------------------------------------------
(defun destroy-paint ( paint)
  (&destroy-paint paint))
(export 'destroy-paint)


;;-----------------------------------------------------------------------------
(defun create-paint ()
  (&create-paint))
(export 'create-paint)


;;-----------------------------------------------------------------------------
(defun draw-path ( path paintModes)
  (&draw-path path paintModes))
(export 'draw-path)


;;-----------------------------------------------------------------------------
(defun path-transformed-bounds ( path minX minY width height)
  (&path-transformed-bounds path minX minY width height))
(export 'path-transformed-bounds)


;;-----------------------------------------------------------------------------
(defun path-bounds ( path minX minY width height)
  (&path-bounds path minX minY width height))
(export 'path-bounds)


;;-----------------------------------------------------------------------------
(defun point-along-path ( path startSegment numSegments distance x y tangentX tangentY)
  (&point-along-path path startSegment numSegments distance x y tangentX tangentY))
(export 'point-along-path)


;;-----------------------------------------------------------------------------
(defun path-length ( path startSegment numSegments)
  (&path-length path startSegment numSegments))
(export 'path-length)


;;-----------------------------------------------------------------------------
(defun interpolate-path ( dstPath startPath endPath amount)
  (&interpolate-path dstPath startPath endPath amount))
(export 'interpolate-path)


;;-----------------------------------------------------------------------------
(defun transform-path ( dstPath srcPath)
  (&transform-path dstPath srcPath))
(export 'transform-path)


;;-----------------------------------------------------------------------------
(defun modify-path-coords ( dstPath startIndex numSegments pathData)
  (&modify-path-coords dstPath startIndex numSegments pathData))
(export 'modify-path-coords)


;;-----------------------------------------------------------------------------
(defun append-path-data ( dstPath numSegments pathSegments pathData)
  (&append-path-data dstPath numSegments pathSegments pathData))
(export 'append-path-data)


;;-----------------------------------------------------------------------------
(defun append-path ( dstPath srcPath)
  (&append-path dstPath srcPath))
(export 'append-path)


;;-----------------------------------------------------------------------------
(defun get-path-capabilities ( path)
  (&get-path-capabilities path))
(export 'get-path-capabilities)


;;-----------------------------------------------------------------------------
(defun remove-path-capabilities ( path capabilities)
  (&remove-path-capabilities path capabilities))
(export 'remove-path-capabilities)


;;-----------------------------------------------------------------------------
(defun destroy-path ( path)
  (&destroy-path path))
(export 'destroy-path)


;;-----------------------------------------------------------------------------
(defun clear-path ( path capabilities)
  (&clear-path path capabilities))
(export 'clear-path)


;;-----------------------------------------------------------------------------
(defun create-path ( pathFormat datatype scale bias segmentCapacityHint coordCapacityHint capabilities)
  (&create-path pathFormat datatype scale bias segmentCapacityHint coordCapacityHint capabilities))
(export 'create-path)


;;-----------------------------------------------------------------------------
(defun clear ( x y width height)
  (&clear x y width height))
(export 'clear)


;;-----------------------------------------------------------------------------
(defun copy-mask ( maskLayer dx dy sx sy width height)
  (&copy-mask maskLayer dx dy sx sy width height))
(export 'copy-mask)


;;-----------------------------------------------------------------------------
(defun fill-mask-layer ( maskLayer x y width height value)
  (&fill-mask-layer maskLayer x y width height value))
(export 'fill-mask-layer)


;;-----------------------------------------------------------------------------
(defun destroy-mask-layer ( maskLayer)
  (&destroy-mask-layer maskLayer))
(export 'destroy-mask-layer)


;;-----------------------------------------------------------------------------
(defun create-mask-layer ( width height)
  (&create-mask-layer width height))
(export 'create-mask-layer)


;;-----------------------------------------------------------------------------
(defun render-to-mask ( path paintModes operation)
  (&render-to-mask path paintModes operation))
(export 'render-to-mask)


;;-----------------------------------------------------------------------------
(defun mask ( mask operation x y width height)
  (&mask mask operation x y width height))
(export 'mask)


;;-----------------------------------------------------------------------------
(defun rotate ( angle)
  (&rotate angle))
(export 'rotate)


;;-----------------------------------------------------------------------------
(defun shear ( shx shy)
  (&shear shx shy))
(export 'shear)


;;-----------------------------------------------------------------------------
(defun scale ( sx sy)
  (&scale sx sy))
(export 'scale)


;;-----------------------------------------------------------------------------
(defun translate ( tx ty)
  (&translate tx ty))
(export 'translate)


;;-----------------------------------------------------------------------------
(defun mult-matrix ( m)
  (&mult-matrix m))
(export 'mult-matrix)


;;-----------------------------------------------------------------------------
(defun get-matrix ( m)
  (&get-matrix m))
(export 'get-matrix)


;;-----------------------------------------------------------------------------
(defun load-matrix ( m)
  (&load-matrix m))
(export 'load-matrix)


;;-----------------------------------------------------------------------------
(defun load-identity ()
  (&load-identity))
(export 'load-identity)


;;-----------------------------------------------------------------------------
(defun get-parameter-iv ( object paramType count values)
  (&get-parameter-iv object paramType count values))
(export 'get-parameter-iv)


;;-----------------------------------------------------------------------------
(defun get-parameter-fv ( object paramType count values)
  (&get-parameter-fv object paramType count values))
(export 'get-parameter-fv)


;;-----------------------------------------------------------------------------
(defun get-parameter-vector-size ( object paramType)
  (&get-parameter-vector-size object paramType))
(export 'get-parameter-vector-size)


;;-----------------------------------------------------------------------------
(defun get-parameter-i ( object paramType)
  (&get-parameter-i object paramType))
(export 'get-parameter-i)


;;-----------------------------------------------------------------------------
(defun get-parameter-f ( object paramType)
  (&get-parameter-f object paramType))
(export 'get-parameter-f)


;;-----------------------------------------------------------------------------
(defun set-parameter-iv ( object paramType count values)
  (&set-parameter-iv object paramType count values))
(export 'set-parameter-iv)


;;-----------------------------------------------------------------------------
(defun set-parameter-fv ( object paramType count values)
  (&set-parameter-fv object paramType count values))
(export 'set-parameter-fv)


;;-----------------------------------------------------------------------------
(defun set-parameter-i ( object paramType value)
  (&set-parameter-i object paramType value))
(export 'set-parameter-i)


;;-----------------------------------------------------------------------------
(defun set-parameter-f ( object paramType value)
  (&set-parameter-f object paramType value))
(export 'set-parameter-f)


;;-----------------------------------------------------------------------------
(defun get-iv ( type count values)
  (&get-iv type count values))
(export 'get-iv)


;;-----------------------------------------------------------------------------
(defun get-fv ( type count values)
  (&get-fv type count values))
(export 'get-fv)


;;-----------------------------------------------------------------------------
(defun get-vector-size ( type)
  (&get-vector-size type))
(export 'get-vector-size)


;;-----------------------------------------------------------------------------
(defun get-i ( type)
  (&get-i type))
(export 'get-i)


;;-----------------------------------------------------------------------------
(defun get-f ( type)
  (&get-f type))
(export 'get-f)


;;-----------------------------------------------------------------------------
(defun set-iv ( type count values)
  (&set-iv type count values))
(export 'set-iv)


;;-----------------------------------------------------------------------------
(defun set-fv ( type count values)
 (declare  (optimize (speed 3) (safety 0) (debug 0)))


  (&set-fv  type count values))
(export 'set-fv)


;;-----------------------------------------------------------------------------
(defun set-i ( type value)
  (&set-i type value))
(export 'set-i)


;;-----------------------------------------------------------------------------
(defun set-f ( type value)
  (&set-f type value))
(export 'set-f)


;;-----------------------------------------------------------------------------
(defun finish ()
  (&finish))
(export 'finish)


;;-----------------------------------------------------------------------------
(defun flush ()
  (&flush))
(export 'flush)


;;-----------------------------------------------------------------------------
(defun get-error ()
  (&get-error))
(export 'get-error)

